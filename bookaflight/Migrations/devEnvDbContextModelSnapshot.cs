// <auto-generated />
using System;
using BookAFlight.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookAFlight.Migrations
{
    [DbContext(typeof(devEnvDbContext))]
    partial class devEnvDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BookAFlight.Entities.Fleet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<byte?>("NumberOfBusinessClassSeats")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("NumberOfEconomicClassSeats")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("NumberOfFirstClassSeats")
                        .HasColumnType("tinyint");

                    b.Property<byte>("NumberOfServiceSeats")
                        .HasColumnType("tinyint");

                    b.Property<string>("Registry")
                        .IsRequired()
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)");

                    b.HasKey("Id");

                    b.ToTable("Fleet", (string)null);
                });

            modelBuilder.Entity("BookAFlight.Entities.Flight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AircraftId")
                        .HasColumnType("int");

                    b.Property<string>("BeetweenAproche")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("BeetweenAprocheDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("BuisnessClassSeatPrice")
                        .HasColumnType("money");

                    b.Property<decimal?>("EconomicClassSeatPrice")
                        .HasColumnType("money");

                    b.Property<string>("EndAirport")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("EndCity")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EndDateOnly")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("FirstClassSeatPrice")
                        .HasColumnType("money");

                    b.Property<string>("FlightCode")
                        .IsRequired()
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)");

                    b.Property<short>("NumberOfMaxPersonsWithRegistredBaggage")
                        .HasColumnType("smallint");

                    b.Property<decimal>("RegistredBaggagePrice")
                        .HasColumnType("money");

                    b.Property<string>("StartAirport")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("StartCity")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("StartDateOnly")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AircraftId");

                    b.HasIndex(new[] { "FlightCode" }, "UQ_FlightCode")
                        .IsUnique();

                    b.HasIndex(new[] { "Id" }, "UQ_Id")
                        .IsUnique();

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("BookAFlight.Entities.PassangerDatum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<decimal>("PeselNumber")
                        .HasColumnType("numeric(11,0)");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.Property<string>("SecondName")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<int?>("UserIdIfRegistred")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PassangerData");
                });

            modelBuilder.Entity("BookAFlight.Entities.Passenger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("FlightId")
                        .HasColumnType("int");

                    b.Property<int>("PassengerRegistryId")
                        .HasColumnType("int");

                    b.Property<bool>("RegistredBaggage")
                        .HasColumnType("bit");

                    b.Property<int>("ReservationCreatorId")
                        .HasColumnType("int");

                    b.Property<string>("SeatType")
                        .IsRequired()
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)");

                    b.HasKey("Id");

                    b.ToTable("Passengers");
                });

            modelBuilder.Entity("BookAFlight.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("BookAFlight.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PeselNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)");

                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("SecondName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Id", "Username", "Email", "PeselNumber", "PhoneNumber" }, "UC_User")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BookAFlight.Models.Functions.FilterFlights", b =>
                {
                    b.Property<DateTime>("StartDateMax")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDateMin")
                        .HasColumnType("datetime2");

                    b.ToFunction("FilterFlights");
                });

            modelBuilder.Entity("BookAFlight.Entities.Flight", b =>
                {
                    b.HasOne("BookAFlight.Entities.Fleet", "Aircraft")
                        .WithMany("Flights")
                        .HasForeignKey("AircraftId")
                        .IsRequired()
                        .HasConstraintName("AircraftId");

                    b.Navigation("Aircraft");
                });

            modelBuilder.Entity("BookAFlight.Entities.User", b =>
                {
                    b.HasOne("BookAFlight.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Role");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BookAFlight.Entities.Fleet", b =>
                {
                    b.Navigation("Flights");
                });

            modelBuilder.Entity("BookAFlight.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
